package com.example.acceptance2.greendao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.acceptance2.greendao.bean.UnresolvedBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "UNRESOLVED_BEAN".
*/
public class UnresolvedBeanDao extends AbstractDao<UnresolvedBean, Long> {

    public static final String TABLENAME = "UNRESOLVED_BEAN";

    /**
     * Properties of entity UnresolvedBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UId = new Property(0, Long.class, "uId", true, "_id");
        public final static Property DataPackageId = new Property(1, String.class, "dataPackageId", false, "DATA_PACKAGE_ID");
        public final static Property Id = new Property(2, String.class, "id", false, "ID");
        public final static Property ProductCode = new Property(3, String.class, "productCode", false, "PRODUCT_CODE");
        public final static Property Question = new Property(4, String.class, "question", false, "QUESTION");
        public final static Property Confirmer = new Property(5, String.class, "confirmer", false, "CONFIRMER");
        public final static Property ConfirmTime = new Property(6, String.class, "confirmTime", false, "CONFIRM_TIME");
        public final static Property FileId = new Property(7, String.class, "fileId", false, "FILE_ID");
        public final static Property UniqueValue = new Property(8, String.class, "uniqueValue", false, "UNIQUE_VALUE");
        public final static Property Description = new Property(9, String.class, "description", false, "DESCRIPTION");
    }


    public UnresolvedBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UnresolvedBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"UNRESOLVED_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: uId
                "\"DATA_PACKAGE_ID\" TEXT," + // 1: dataPackageId
                "\"ID\" TEXT," + // 2: id
                "\"PRODUCT_CODE\" TEXT," + // 3: productCode
                "\"QUESTION\" TEXT," + // 4: question
                "\"CONFIRMER\" TEXT," + // 5: confirmer
                "\"CONFIRM_TIME\" TEXT," + // 6: confirmTime
                "\"FILE_ID\" TEXT," + // 7: fileId
                "\"UNIQUE_VALUE\" TEXT," + // 8: uniqueValue
                "\"DESCRIPTION\" TEXT);"); // 9: description
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"UNRESOLVED_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UnresolvedBean entity) {
        stmt.clearBindings();
 
        Long uId = entity.getUId();
        if (uId != null) {
            stmt.bindLong(1, uId);
        }
 
        String dataPackageId = entity.getDataPackageId();
        if (dataPackageId != null) {
            stmt.bindString(2, dataPackageId);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(3, id);
        }
 
        String productCode = entity.getProductCode();
        if (productCode != null) {
            stmt.bindString(4, productCode);
        }
 
        String question = entity.getQuestion();
        if (question != null) {
            stmt.bindString(5, question);
        }
 
        String confirmer = entity.getConfirmer();
        if (confirmer != null) {
            stmt.bindString(6, confirmer);
        }
 
        String confirmTime = entity.getConfirmTime();
        if (confirmTime != null) {
            stmt.bindString(7, confirmTime);
        }
 
        String fileId = entity.getFileId();
        if (fileId != null) {
            stmt.bindString(8, fileId);
        }
 
        String uniqueValue = entity.getUniqueValue();
        if (uniqueValue != null) {
            stmt.bindString(9, uniqueValue);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(10, description);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UnresolvedBean entity) {
        stmt.clearBindings();
 
        Long uId = entity.getUId();
        if (uId != null) {
            stmt.bindLong(1, uId);
        }
 
        String dataPackageId = entity.getDataPackageId();
        if (dataPackageId != null) {
            stmt.bindString(2, dataPackageId);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(3, id);
        }
 
        String productCode = entity.getProductCode();
        if (productCode != null) {
            stmt.bindString(4, productCode);
        }
 
        String question = entity.getQuestion();
        if (question != null) {
            stmt.bindString(5, question);
        }
 
        String confirmer = entity.getConfirmer();
        if (confirmer != null) {
            stmt.bindString(6, confirmer);
        }
 
        String confirmTime = entity.getConfirmTime();
        if (confirmTime != null) {
            stmt.bindString(7, confirmTime);
        }
 
        String fileId = entity.getFileId();
        if (fileId != null) {
            stmt.bindString(8, fileId);
        }
 
        String uniqueValue = entity.getUniqueValue();
        if (uniqueValue != null) {
            stmt.bindString(9, uniqueValue);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(10, description);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UnresolvedBean readEntity(Cursor cursor, int offset) {
        UnresolvedBean entity = new UnresolvedBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // uId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // dataPackageId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // productCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // question
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // confirmer
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // confirmTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // fileId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // uniqueValue
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // description
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UnresolvedBean entity, int offset) {
        entity.setUId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDataPackageId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProductCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setQuestion(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setConfirmer(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setConfirmTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFileId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUniqueValue(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDescription(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UnresolvedBean entity, long rowId) {
        entity.setUId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UnresolvedBean entity) {
        if(entity != null) {
            return entity.getUId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UnresolvedBean entity) {
        return entity.getUId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
