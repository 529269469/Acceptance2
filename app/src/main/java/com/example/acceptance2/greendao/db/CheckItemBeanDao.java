package com.example.acceptance2.greendao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.acceptance2.greendao.bean.CheckItemBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHECK_ITEM_BEAN".
*/
public class CheckItemBeanDao extends AbstractDao<CheckItemBean, Long> {

    public static final String TABLENAME = "CHECK_ITEM_BEAN";

    /**
     * Properties of entity CheckItemBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UId = new Property(0, Long.class, "uId", true, "_id");
        public final static Property DataPackageId = new Property(1, String.class, "dataPackageId", false, "DATA_PACKAGE_ID");
        public final static Property CheckFileId = new Property(2, String.class, "checkFileId", false, "CHECK_FILE_ID");
        public final static Property CheckGroupId = new Property(3, String.class, "checkGroupId", false, "CHECK_GROUP_ID");
        public final static Property Id = new Property(4, String.class, "id", false, "ID");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property Options = new Property(6, String.class, "options", false, "OPTIONS");
        public final static Property Selected = new Property(7, String.class, "selected", false, "SELECTED");
        public final static Property UniqueValue = new Property(8, String.class, "uniqueValue", false, "UNIQUE_VALUE");
        public final static Property Sort = new Property(9, String.class, "sort", false, "SORT");
        public final static Property Description = new Property(10, String.class, "description", false, "DESCRIPTION");
        public final static Property Relate = new Property(11, String.class, "relate", false, "RELATE");
        public final static Property IsCheckItemRelate = new Property(12, boolean.class, "isCheckItemRelate", false, "IS_CHECK_ITEM_RELATE");
    }


    public CheckItemBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CheckItemBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHECK_ITEM_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: uId
                "\"DATA_PACKAGE_ID\" TEXT," + // 1: dataPackageId
                "\"CHECK_FILE_ID\" TEXT," + // 2: checkFileId
                "\"CHECK_GROUP_ID\" TEXT," + // 3: checkGroupId
                "\"ID\" TEXT," + // 4: id
                "\"NAME\" TEXT," + // 5: name
                "\"OPTIONS\" TEXT," + // 6: options
                "\"SELECTED\" TEXT," + // 7: selected
                "\"UNIQUE_VALUE\" TEXT," + // 8: uniqueValue
                "\"SORT\" TEXT," + // 9: sort
                "\"DESCRIPTION\" TEXT," + // 10: description
                "\"RELATE\" TEXT," + // 11: relate
                "\"IS_CHECK_ITEM_RELATE\" INTEGER NOT NULL );"); // 12: isCheckItemRelate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHECK_ITEM_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CheckItemBean entity) {
        stmt.clearBindings();
 
        Long uId = entity.getUId();
        if (uId != null) {
            stmt.bindLong(1, uId);
        }
 
        String dataPackageId = entity.getDataPackageId();
        if (dataPackageId != null) {
            stmt.bindString(2, dataPackageId);
        }
 
        String checkFileId = entity.getCheckFileId();
        if (checkFileId != null) {
            stmt.bindString(3, checkFileId);
        }
 
        String checkGroupId = entity.getCheckGroupId();
        if (checkGroupId != null) {
            stmt.bindString(4, checkGroupId);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(5, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String options = entity.getOptions();
        if (options != null) {
            stmt.bindString(7, options);
        }
 
        String selected = entity.getSelected();
        if (selected != null) {
            stmt.bindString(8, selected);
        }
 
        String uniqueValue = entity.getUniqueValue();
        if (uniqueValue != null) {
            stmt.bindString(9, uniqueValue);
        }
 
        String sort = entity.getSort();
        if (sort != null) {
            stmt.bindString(10, sort);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(11, description);
        }
 
        String relate = entity.getRelate();
        if (relate != null) {
            stmt.bindString(12, relate);
        }
        stmt.bindLong(13, entity.getIsCheckItemRelate() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CheckItemBean entity) {
        stmt.clearBindings();
 
        Long uId = entity.getUId();
        if (uId != null) {
            stmt.bindLong(1, uId);
        }
 
        String dataPackageId = entity.getDataPackageId();
        if (dataPackageId != null) {
            stmt.bindString(2, dataPackageId);
        }
 
        String checkFileId = entity.getCheckFileId();
        if (checkFileId != null) {
            stmt.bindString(3, checkFileId);
        }
 
        String checkGroupId = entity.getCheckGroupId();
        if (checkGroupId != null) {
            stmt.bindString(4, checkGroupId);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(5, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String options = entity.getOptions();
        if (options != null) {
            stmt.bindString(7, options);
        }
 
        String selected = entity.getSelected();
        if (selected != null) {
            stmt.bindString(8, selected);
        }
 
        String uniqueValue = entity.getUniqueValue();
        if (uniqueValue != null) {
            stmt.bindString(9, uniqueValue);
        }
 
        String sort = entity.getSort();
        if (sort != null) {
            stmt.bindString(10, sort);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(11, description);
        }
 
        String relate = entity.getRelate();
        if (relate != null) {
            stmt.bindString(12, relate);
        }
        stmt.bindLong(13, entity.getIsCheckItemRelate() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CheckItemBean readEntity(Cursor cursor, int offset) {
        CheckItemBean entity = new CheckItemBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // uId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // dataPackageId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // checkFileId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // checkGroupId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // options
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // selected
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // uniqueValue
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // sort
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // description
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // relate
            cursor.getShort(offset + 12) != 0 // isCheckItemRelate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CheckItemBean entity, int offset) {
        entity.setUId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDataPackageId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCheckFileId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCheckGroupId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOptions(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSelected(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUniqueValue(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSort(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDescription(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setRelate(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIsCheckItemRelate(cursor.getShort(offset + 12) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CheckItemBean entity, long rowId) {
        entity.setUId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CheckItemBean entity) {
        if(entity != null) {
            return entity.getUId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CheckItemBean entity) {
        return entity.getUId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
