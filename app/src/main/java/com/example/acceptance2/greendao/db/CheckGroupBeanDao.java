package com.example.acceptance2.greendao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.acceptance2.greendao.bean.CheckGroupBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHECK_GROUP_BEAN".
*/
public class CheckGroupBeanDao extends AbstractDao<CheckGroupBean, Long> {

    public static final String TABLENAME = "CHECK_GROUP_BEAN";

    /**
     * Properties of entity CheckGroupBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UId = new Property(0, Long.class, "uId", true, "_id");
        public final static Property DataPackageId = new Property(1, String.class, "dataPackageId", false, "DATA_PACKAGE_ID");
        public final static Property CheckFileId = new Property(2, String.class, "checkFileId", false, "CHECK_FILE_ID");
        public final static Property Id = new Property(3, String.class, "id", false, "ID");
        public final static Property GroupName = new Property(4, String.class, "groupName", false, "GROUP_NAME");
        public final static Property CheckGroupConclusion = new Property(5, String.class, "checkGroupConclusion", false, "CHECK_GROUP_CONCLUSION");
        public final static Property CheckPerson = new Property(6, String.class, "checkPerson", false, "CHECK_PERSON");
        public final static Property IsConclusion = new Property(7, String.class, "isConclusion", false, "IS_CONCLUSION");
        public final static Property IsTable = new Property(8, String.class, "isTable", false, "IS_TABLE");
        public final static Property UniqueValue = new Property(9, String.class, "uniqueValue", false, "UNIQUE_VALUE");
        public final static Property CheckTime = new Property(10, String.class, "checkTime", false, "CHECK_TIME");
        public final static Property ConclusionF = new Property(11, String.class, "conclusionF", false, "CONCLUSION_F");
        public final static Property CheckPersonF = new Property(12, String.class, "checkPersonF", false, "CHECK_PERSON_F");
        public final static Property Sort = new Property(13, String.class, "sort", false, "SORT");
        public final static Property CheckTimeF = new Property(14, String.class, "checkTimeF", false, "CHECK_TIME_F");
        public final static Property TestTable = new Property(15, String.class, "testTable", false, "TEST_TABLE");
    }


    public CheckGroupBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CheckGroupBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHECK_GROUP_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: uId
                "\"DATA_PACKAGE_ID\" TEXT," + // 1: dataPackageId
                "\"CHECK_FILE_ID\" TEXT," + // 2: checkFileId
                "\"ID\" TEXT," + // 3: id
                "\"GROUP_NAME\" TEXT," + // 4: groupName
                "\"CHECK_GROUP_CONCLUSION\" TEXT," + // 5: checkGroupConclusion
                "\"CHECK_PERSON\" TEXT," + // 6: checkPerson
                "\"IS_CONCLUSION\" TEXT," + // 7: isConclusion
                "\"IS_TABLE\" TEXT," + // 8: isTable
                "\"UNIQUE_VALUE\" TEXT," + // 9: uniqueValue
                "\"CHECK_TIME\" TEXT," + // 10: checkTime
                "\"CONCLUSION_F\" TEXT," + // 11: conclusionF
                "\"CHECK_PERSON_F\" TEXT," + // 12: checkPersonF
                "\"SORT\" TEXT," + // 13: sort
                "\"CHECK_TIME_F\" TEXT," + // 14: checkTimeF
                "\"TEST_TABLE\" TEXT);"); // 15: testTable
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHECK_GROUP_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CheckGroupBean entity) {
        stmt.clearBindings();
 
        Long uId = entity.getUId();
        if (uId != null) {
            stmt.bindLong(1, uId);
        }
 
        String dataPackageId = entity.getDataPackageId();
        if (dataPackageId != null) {
            stmt.bindString(2, dataPackageId);
        }
 
        String checkFileId = entity.getCheckFileId();
        if (checkFileId != null) {
            stmt.bindString(3, checkFileId);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(4, id);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(5, groupName);
        }
 
        String checkGroupConclusion = entity.getCheckGroupConclusion();
        if (checkGroupConclusion != null) {
            stmt.bindString(6, checkGroupConclusion);
        }
 
        String checkPerson = entity.getCheckPerson();
        if (checkPerson != null) {
            stmt.bindString(7, checkPerson);
        }
 
        String isConclusion = entity.getIsConclusion();
        if (isConclusion != null) {
            stmt.bindString(8, isConclusion);
        }
 
        String isTable = entity.getIsTable();
        if (isTable != null) {
            stmt.bindString(9, isTable);
        }
 
        String uniqueValue = entity.getUniqueValue();
        if (uniqueValue != null) {
            stmt.bindString(10, uniqueValue);
        }
 
        String checkTime = entity.getCheckTime();
        if (checkTime != null) {
            stmt.bindString(11, checkTime);
        }
 
        String conclusionF = entity.getConclusionF();
        if (conclusionF != null) {
            stmt.bindString(12, conclusionF);
        }
 
        String checkPersonF = entity.getCheckPersonF();
        if (checkPersonF != null) {
            stmt.bindString(13, checkPersonF);
        }
 
        String sort = entity.getSort();
        if (sort != null) {
            stmt.bindString(14, sort);
        }
 
        String checkTimeF = entity.getCheckTimeF();
        if (checkTimeF != null) {
            stmt.bindString(15, checkTimeF);
        }
 
        String testTable = entity.getTestTable();
        if (testTable != null) {
            stmt.bindString(16, testTable);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CheckGroupBean entity) {
        stmt.clearBindings();
 
        Long uId = entity.getUId();
        if (uId != null) {
            stmt.bindLong(1, uId);
        }
 
        String dataPackageId = entity.getDataPackageId();
        if (dataPackageId != null) {
            stmt.bindString(2, dataPackageId);
        }
 
        String checkFileId = entity.getCheckFileId();
        if (checkFileId != null) {
            stmt.bindString(3, checkFileId);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(4, id);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(5, groupName);
        }
 
        String checkGroupConclusion = entity.getCheckGroupConclusion();
        if (checkGroupConclusion != null) {
            stmt.bindString(6, checkGroupConclusion);
        }
 
        String checkPerson = entity.getCheckPerson();
        if (checkPerson != null) {
            stmt.bindString(7, checkPerson);
        }
 
        String isConclusion = entity.getIsConclusion();
        if (isConclusion != null) {
            stmt.bindString(8, isConclusion);
        }
 
        String isTable = entity.getIsTable();
        if (isTable != null) {
            stmt.bindString(9, isTable);
        }
 
        String uniqueValue = entity.getUniqueValue();
        if (uniqueValue != null) {
            stmt.bindString(10, uniqueValue);
        }
 
        String checkTime = entity.getCheckTime();
        if (checkTime != null) {
            stmt.bindString(11, checkTime);
        }
 
        String conclusionF = entity.getConclusionF();
        if (conclusionF != null) {
            stmt.bindString(12, conclusionF);
        }
 
        String checkPersonF = entity.getCheckPersonF();
        if (checkPersonF != null) {
            stmt.bindString(13, checkPersonF);
        }
 
        String sort = entity.getSort();
        if (sort != null) {
            stmt.bindString(14, sort);
        }
 
        String checkTimeF = entity.getCheckTimeF();
        if (checkTimeF != null) {
            stmt.bindString(15, checkTimeF);
        }
 
        String testTable = entity.getTestTable();
        if (testTable != null) {
            stmt.bindString(16, testTable);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CheckGroupBean readEntity(Cursor cursor, int offset) {
        CheckGroupBean entity = new CheckGroupBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // uId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // dataPackageId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // checkFileId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // groupName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // checkGroupConclusion
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // checkPerson
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // isConclusion
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // isTable
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // uniqueValue
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // checkTime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // conclusionF
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // checkPersonF
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // sort
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // checkTimeF
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // testTable
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CheckGroupBean entity, int offset) {
        entity.setUId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDataPackageId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCheckFileId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGroupName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCheckGroupConclusion(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCheckPerson(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsConclusion(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsTable(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUniqueValue(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCheckTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setConclusionF(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCheckPersonF(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSort(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCheckTimeF(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setTestTable(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CheckGroupBean entity, long rowId) {
        entity.setUId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CheckGroupBean entity) {
        if(entity != null) {
            return entity.getUId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CheckGroupBean entity) {
        return entity.getUId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
